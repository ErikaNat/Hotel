---
// components/Chatbot.astro
---

<div id="chatbot-container" class="chatbot-container">
  <div id="chatbot-toggle" class="chatbot-toggle">
    <i class="fas fa-comments"></i>
  </div>
  
  <div id="chatbot-window" class="chatbot-window">
    <div class="chatbot-header">
      <h3>Asistente Virtual</h3>
      <button id="chatbot-close" class="chatbot-close">&times;</button>
    </div>
    
    <div id="chatbot-messages" class="chatbot-messages">
      <div class="message bot-message">
        ¡Hola! Soy tu asistente virtual del hotel. ¿En qué puedo ayudarte?
      </div>
    </div>
    
    <div class="chatbot-input-container">
      <input 
        type="text" 
        id="chatbot-input" 
        placeholder="Escribe tu mensaje..."
        maxlength="500"
      />
      <button id="chatbot-send" class="chatbot-send">
        <i class="fas fa-paper-plane"></i>
      </button>
    </div>
  </div>
</div>

<script>
  // Configuración - REEMPLAZA CON TU API KEY
  const GROQ_API_KEY = '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';
  const GROQ_API_URL = 'https://api.groq.com/openai/v1/chat/completions';

  class Chatbot {
    constructor() {
      this.isOpen = false;
      this.isLoading = false;
      this.initializeElements();
      this.attachEventListeners();
    }

    initializeElements() {
      this.toggle = document.getElementById('chatbot-toggle');
      this.window = document.getElementById('chatbot-window');
      this.close = document.getElementById('chatbot-close');
      this.messages = document.getElementById('chatbot-messages');
      this.input = document.getElementById('chatbot-input');
      this.send = document.getElementById('chatbot-send');
    }

    attachEventListeners() {
      this.toggle.addEventListener('click', () => this.toggleChat());
      this.close.addEventListener('click', () => this.closeChat());
      this.send.addEventListener('click', () => this.sendMessage());
      this.input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') this.sendMessage();
      });
    }

    toggleChat() {
      this.isOpen = !this.isOpen;
      this.window.classList.toggle('active', this.isOpen);
      if (this.isOpen) {
        this.input.focus();
      }
    }

    closeChat() {
      this.isOpen = false;
      this.window.classList.remove('active');
    }

    async sendMessage() {
      const message = this.input.value.trim();
      if (!message || this.isLoading) return;

      // Agregar mensaje del usuario
      this.addMessage(message, 'user');
      this.input.value = '';

      // Mostrar indicador de carga
      this.showLoading();

      try {
        const response = await this.callGroqAPI(message);
        this.hideLoading();
        this.addMessage(response, 'bot');
      } catch (error) {
        this.hideLoading();
        this.addMessage('Lo siento, hubo un error. Por favor intenta de nuevo.', 'bot');
        console.error('Error:', error);
      }
    }

    async callGroqAPI(message) {
      const response = await fetch(GROQ_API_URL, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${GROQ_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'llama3-8b-8192',
          messages: [
            {
              role: 'system',
              content: 'Eres un asistente virtual de un hotel eco-turístico. Responde de manera amigable y profesional sobre servicios del hotel, reservas, actividades eco-turísticas y turismo sostenible. Mantén respuestas concisas (máximo 150 palabras).'
            },
            {
              role: 'user',
              content: message
            }
          ],
          max_tokens: 200,
          temperature: 0.7
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      return data.choices[0].message.content;
    }

    addMessage(text, type) {
      const messageDiv = document.createElement('div');
      messageDiv.className = `message ${type}-message`;
      messageDiv.textContent = text;
      
      this.messages.appendChild(messageDiv);
      this.messages.scrollTop = this.messages.scrollHeight;
    }

    showLoading() {
      this.isLoading = true;
      const loadingDiv = document.createElement('div');
      loadingDiv.className = 'message bot-message loading';
      loadingDiv.innerHTML = '<span class="typing-dots"><span></span><span></span><span></span></span>';
      loadingDiv.id = 'loading-message';
      
      this.messages.appendChild(loadingDiv);
      this.messages.scrollTop = this.messages.scrollHeight;
    }

    hideLoading() {
      this.isLoading = false;
      const loadingMessage = document.getElementById('loading-message');
      if (loadingMessage) {
        loadingMessage.remove();
      }
    }
  }

  // Inicializar chatbot cuando se carga la página
  document.addEventListener('DOMContentLoaded', () => {
    new Chatbot();
  });
</script>

<style>
  .chatbot-container {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1000;
    font-family: 'Poppins', sans-serif;
  }

  .chatbot-toggle {
    width: 60px;
    height: 60px;
    background: var(--primary-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    box-shadow: 0 4px 15px rgba(48, 132, 70, 0.3);
    transition: all 0.3s ease;
  }

  .chatbot-toggle:hover {
    background: var(--primary-color-dark);
    transform: scale(1.1);
  }

  .chatbot-toggle i {
    color: white;
    font-size: 24px;
  }

  .chatbot-window {
    position: absolute;
    bottom: 80px;
    right: 0;
    width: 350px;
    height: 500px;
    background: white;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    display: flex;
    flex-direction: column;
    opacity: 0;
    visibility: hidden;
    transform: translateY(20px);
    transition: all 0.3s ease;
  }

  .chatbot-window.active {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .chatbot-header {
    background: var(--primary-color);
    color: white;
    padding: 15px 20px;
    border-radius: 15px 15px 0 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .chatbot-header h3 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
  }

  .chatbot-close {
    background: none;
    border: none;
    color: white;
    font-size: 24px;
    cursor: pointer;
    padding: 0;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .chatbot-messages {
    flex: 1;
    padding: 20px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .message {
    max-width: 80%;
    padding: 12px 16px;
    border-radius: 18px;
    font-size: 14px;
    line-height: 1.4;
    word-wrap: break-word;
  }

  .user-message {
    background: var(--primary-color);
    color: white;
    align-self: flex-end;
    border-bottom-right-radius: 4px;
  }

  .bot-message {
    background: #f1f1f1;
    color: var(--text-dark);
    align-self: flex-start;
    border-bottom-left-radius: 4px;
  }

  .loading {
    background: #f1f1f1 !important;
  }

  .typing-dots {
    display: inline-flex;
    gap: 2px;
  }

  .typing-dots span {
    width: 6px;
    height: 6px;
    background: #999;
    border-radius: 50%;
    animation: typing 1.4s infinite ease-in-out;
  }

  .typing-dots span:nth-child(1) { animation-delay: 0s; }
  .typing-dots span:nth-child(2) { animation-delay: 0.2s; }
  .typing-dots span:nth-child(3) { animation-delay: 0.4s; }

  @keyframes typing {
    0%, 60%, 100% { opacity: 0.3; transform: scale(0.8); }
    30% { opacity: 1; transform: scale(1); }
  }

  .chatbot-input-container {
    padding: 15px 20px;
    border-top: 1px solid #eee;
    display: flex;
    gap: 10px;
    align-items: center;
  }

  #chatbot-input {
    flex: 1;
    border: 1px solid #ddd;
    border-radius: 25px;
    padding: 12px 16px;
    font-size: 14px;
    outline: none;
    transition: border-color 0.3s;
  }

  #chatbot-input:focus {
    border-color: var(--primary-color);
  }

  .chatbot-send {
    width: 40px;
    height: 40px;
    background: var(--primary-color);
    border: none;
    border-radius: 50%;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.3s;
  }

  .chatbot-send:hover {
    background: var(--primary-color-dark);
  }

  .chatbot-send i {
    font-size: 14px;
  }

  /* Responsive */
  @media (max-width: 480px) {
    .chatbot-window {
      width: 300px;
      height: 450px;
    }
    
    .chatbot-container {
      bottom: 15px;
      right: 15px;
    }
  }
</style>